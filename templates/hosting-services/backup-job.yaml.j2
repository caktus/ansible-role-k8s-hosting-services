{#
Anywhere we need to inject a non-scalar value, we use to_json instead of to_yaml because it:
1) more reliably includes wrapping {}
2) behaves identically on Python 2 and Python 3
(and all JSON is valid YAML).
#}
apiVersion: v1
kind: Secret
metadata:
  name: "{{ k8s_hosting_services_name }}-secrets"
  labels:
    app: "{{ k8s_hosting_services_name }}"
  namespace: "{{ k8s_hosting_services_namespace }}"
type: Opaque
stringData: {{ k8s_hosting_services_environment | to_json }}
{% for crontab in k8s_hosting_services_cron_schedules %}
---
apiVersion: batch/v1
kind: CronJob
metadata:
  namespace: "{{ k8s_hosting_services_namespace }}"
  name: "{{ k8s_hosting_services_name }}-{{ crontab.label }}"
  labels:
    app: "{{ k8s_hosting_services_name }}"
spec:
  schedule: "{{ crontab.schedule }}"
  jobTemplate:
    spec:
      template:
        spec:
          containers:
          - name: "{{ k8s_hosting_services_name }}"
            image: "{{ k8s_hosting_services_image }}:{{ k8s_hosting_services_image_tag }}"
            imagePullPolicy: "{{ k8s_hosting_services_image_pull_policy }}"
            env:
            - name: GET_HOSTS_FROM
              value: dns
            - name: BACKUP_INTERVAL_LABEL
              value: "{{ crontab.label }}"
            envFrom:
            - secretRef:
                name: "{{ k8s_hosting_services_name }}-secrets"
            resources: {{ k8s_hosting_services_resources | to_json }}
          restartPolicy: OnFailure
{% endfor %}
