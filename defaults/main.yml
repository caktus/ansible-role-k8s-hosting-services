k8s_kubeconfig: ~/.kube/config

k8s_wait_timeout: 300  # seconds

k8s_hosting_services_project_name: ""
k8s_hosting_services_backup_base_bucket: caktus-hosting-services-backups
k8s_hosting_services_aws_region: us-east-1
k8s_hosting_services_aws_access_key: AKIAY4HLSP7PECOHWU7P
k8s_hosting_services_aws_secret_access_key: ""
k8s_hosting_services_database_url: ""
k8s_hosting_services_healthcheck_url: ""
k8s_hosting_services_encrypt_secret: ""
k8s_hosting_services_backup_all: "off"
k8s_hosting_services_backup_all_default_db: postgres
k8s_hosting_services_backup_s3: "off"
k8s_hosting_services_backup_s3_source_bucket: ""
k8s_hosting_services_backup_s3_source_region: us-east-1
k8s_hosting_services_backup_s3_source_endpoint_url: https://s3.us-east-1.amazonaws.com/
k8s_hosting_services_backup_s3_source_aws_access_key: ""
k8s_hosting_services_backup_s3_source_aws_secret_access_key: ""

k8s_hosting_services_enabled: true
k8s_hosting_services_name: backup-job
k8s_hosting_services_namespace: hosting-services
k8s_hosting_services_environment:
  PROJECT_NAME: "{{ k8s_hosting_services_project_name }}"
  BACKUP_BASE_BUCKET: "{{ k8s_hosting_services_backup_base_bucket }}"
  AWS_DEFAULT_REGION: "{{ k8s_hosting_services_aws_region }}"
  AWS_ACCESS_KEY_ID: "{{ k8s_hosting_services_aws_access_key }}"
  AWS_SECRET_ACCESS_KEY: "{{ k8s_hosting_services_aws_secret_access_key }}"
  DATABASE_URL: "{{ k8s_hosting_services_database_url }}"
  BACKUP_HEALTHCHECK_URL: "{{ k8s_hosting_services_healthcheck_url }}"
  BACKUP_ENCRYPT: "{{ (k8s_hosting_services_encrypt_secret | length > 0) | ternary('on', 'off') }}"
  BACKUP_ENCRYPT_SECRET: "{{ k8s_hosting_services_encrypt_secret }}"
  BACKUP_ALL: "{{ k8s_hosting_services_backup_all }}"
  BACKUP_ALL_DEFAULT_DB: "{{ k8s_hosting_services_backup_all_default_db }}"
  BACKUP_SOURCE_S3_BUCKET: "{{ k8s_hosting_services_backup_s3 }}"
  SOURCE_AWS_BUCKET: "{{ k8s_hosting_services_backup_s3_source_bucket }}"
  SOURCE_AWS_REGION: "{{ k8s_hosting_services_backup_s3_source_region }}"
  SOURCE_AWS_ACCESS_KEY_ID: "{{ k8s_hosting_services_backup_s3_source_aws_access_key }}"
  SOURCE_AWS_SECRET_ACCESS_KEY: "{{ k8s_hosting_services_backup_s3_source_aws_secret_access_key }}"
  SOURCE_AWS_ENDPOINT_URL: "{{ k8s_hosting_services_backup_s3_source_endpoint_url | default('') }}"
  SOURCE_AWS_CA_BUNDLE: "{{ k8s_hosting_services_backup_s3_source_ca_bundle | default('') }}"
  SOURCE_AWS_NO_VERIFY_SSL: "{{ k8s_hosting_services_backup_s3_source_no_verify_ssl | default('') }}"
k8s_hosting_services_image: ghcr.io/caktus/k8s-caktus-backup
k8s_hosting_services_image_tag: 0.4.0-postgres12
k8s_hosting_services_image_pull_policy: IfNotPresent
k8s_hosting_services_resources:
  requests:
    memory: "100Mi"
    cpu: "50m"
k8s_hosting_services_cron_schedules:
  - label: daily
    schedule: "@daily"
  - label: weekly
    schedule: "@weekly"
  - label: monthly
    schedule: "@monthly"
  - label: yearly
    schedule: "@yearly"

# Disaster Recovery deployment
k8s_restore_name: restore-backup
k8s_restore_namespace: "{{ k8s_hosting_services_namespace }}"
k8s_restore_command: [sleep, infinity]
k8s_restore_image: "{{ k8s_hosting_services_image }}"
k8s_restore_image_tag: "{{ k8s_hosting_services_image_tag }}"
k8s_restore_image_pull_policy: "{{ k8s_hosting_services_image_pull_policy }}"
k8s_restore_replicas: 1
k8s_restore_resources: "{{ k8s_hosting_services_resources }}"
k8s_restore_target_db_url: ''
k8s_restore_target_db_name: "{{ k8s_restore_target_db_url | split('/') | last }}"
k8s_restore_target_schema: public
k8s_restore_sql_commands: []
k8s_restore_remote_archive_path: /tmp/db.pgc
k8s_restore_maint_user: ''
k8s_restore_maint_host: ''
k8s_restore_maint_port: ''
k8s_restore_maint_name: ''
k8s_restore_maint_pass: ''
k8s_restore_environment:
  # Automatically connect as maint user for psql/dropdb/createdb commands
  PGUSER: "{{ k8s_restore_maint_user }}"
  PGHOST: "{{ k8s_restore_maint_host }}"
  PGPORT: "{{ k8s_restore_maint_port }}"
  PGDATABASE: "{{ k8s_restore_maint_name }}"
  PGPASSWORD: "{{ k8s_restore_maint_pass }}"
  # The DB to DROP and CREATE
  TARGET_DATABASE_NAME: "{{ k8s_restore_target_db_name }}"
  TARGET_DATABASE_URL: "{{ k8s_restore_target_db_url }}"
k8s_restore_pg_restore_command: 'pg_restore --no-privileges --no-owner --schema {{ k8s_restore_target_schema }} --dbname ${TARGET_DATABASE_URL} {{ k8s_restore_remote_archive_path }}'
# List of K8s objects to scale before/after db restore to release connections. For example:
#   k8s_restore_scale_pods:
#    - {kind: 'Deployment', name: 'app', replicas: 2}
k8s_restore_scale_pods: []
k8s_restore_containers:
  - name: "{{ k8s_restore_name }}"
    namespace: "{{ k8s_restore_namespace }}"
    command: "{{ k8s_restore_command }}"
    image: "{{ k8s_restore_image }}"
    tag: "{{ k8s_restore_image_tag }}"
    image_pull_policy: "{{ k8s_restore_image_pull_policy }}"
    replicas: "{{ k8s_restore_replicas }}"
    resources: "{{ k8s_restore_resources }}"
    environment: "{{ k8s_restore_environment }}"

k8s_cluster_name: ''

k8s_papertrail_logspout_enabled: "{{ k8s_papertrail_logspout_destination | length > 0 }}"
k8s_papertrail_logspout_destination: ''  # format: syslog+tls://logsN.papertrailapp.com:XXXXX
k8s_papertrail_logspout_syslog_hostname: '{{ k8s_cluster_name }}'  # Systeam name displayed in Papertrail
k8s_papertrail_logspout_syslog_tag: '{% raw %}{{ index .Container.Config.Labels "io.kubernetes.pod.namespace" }}[{{ index .Container.Config.Labels "io.kubernetes.pod.name" }}]{% endraw %}'
k8s_papertrail_logspout_namespace: papertrail
k8s_papertrail_logspout_image: gliderlabs/logspout
k8s_papertrail_logspout_image_tag: v3.2.13
k8s_papertrail_logspout_resources:
  requests:
    memory: 50Mi
    cpu: "0.10"
  limits:
    memory: 128Mi

k8s_newrelic_enabled: "{{ k8s_newrelic_license_key | length > 0 }}"
k8s_newrelic_cluster_name: '{{ k8s_cluster_name }}'
k8s_newrelic_license_key: ''
# https://github.com/newrelic/helm-charts/releases
k8s_newrelic_chart_version: "4.10.0"
k8s_newrelic_chart_ref: nri-bundle
k8s_newrelic_namespace: newrelic
k8s_newrelic_release_name: newrelic-bundle
k8s_newrelic_infrastructure_enabled: true
k8s_newrelic_nri_prometheus_enabled: false
k8s_newrelic_nri_metadata_injection_enabled: true
k8s_newrelic_kube_state_metrics_enabled: true
k8s_newrelic_nri_kube_events_enabled: true
k8s_newrelic_logging_enabled: false
k8s_newrelic_pixie_enabled: false
k8s_newrelic_pixie_chart_enabled: false
k8s_newrelic_infra_operator_enabled: false
k8s_newrelic_prometheus_agent_enabled: false
k8s_newrelic_k8s_metrics_adapter_enabled: false
k8s_newrelic_low_data_mode: true
# Per-bundle values
# https://github.com/newrelic/helm-charts/blob/master/charts/nri-bundle/values.yaml
k8s_newrelic_values_newrelic_infrastructure:
  # New Relic Kubernetes monitoring solution.
  # newrelic-infrastructure.enabled -- Install the [`newrelic-infrastructure` chart](https://github.com/newrelic/nri-kubernetes/tree/main/charts/newrelic-infrastructure)
  enabled: "{{ k8s_newrelic_infrastructure_enabled }}"
k8s_newrelic_values_nri_prometheus:
  # New Relic Prometheus OpenMetrics integration.
  # nri-prometheus.enabled -- Install the [`nri-prometheus` chart](https://github.com/newrelic/nri-prometheus/tree/main/charts/nri-prometheus)
  enabled: "{{ k8s_newrelic_nri_prometheus_enabled }}"
k8s_newrelic_values_nri_metadata_injection:
  # Kubernetes metadata injection for New Relic APM to make a linkage between
  # APM and Infrastructure data.
  # nri-metadata-injection.enabled -- Install the [`nri-metadata-injection` chart](https://github.com/newrelic/k8s-metadata-injection/tree/main/charts/nri-metadata-injection)
  enabled: "{{ k8s_newrelic_nri_metadata_injection_enabled }}"
k8s_newrelic_values_kube_state_metrics:
  # A service that listens to the Kubernetes API server and generates metrics
  # the health of the various objects inside, such as deployments, nodes and
  # pods.
  # kube-state-metrics.enabled -- Install the [`kube-state-metrics` chart](https://github.com/prometheus-community/helm-charts/tree/main/charts/kube-state-metrics) from the stable helm charts repository.
  # This is mandatory if `infrastructure.enabled` is set to `true` and the user does not provide its own instance of KSM version >=1.8 and <=2.0
  enabled: "{{ k8s_newrelic_kube_state_metrics_enabled }}"
k8s_newrelic_values_nri_kube_events:
  # The New Relic Kubernetes events integration watches for events happening in
  # your Kubernetes clusters and sends those events to New Relic.
  # nri-kube-events.enabled -- Install the [`nri-kube-events` chart](https://github.com/newrelic/nri-kube-events/tree/main/charts/nri-kube-events)
  enabled: "{{ k8s_newrelic_nri_kube_events_enabled }}"
k8s_newrelic_values_newrelic_logging:
  # New Relic offers a Fluent Bit output plugin to easily forward your logs to New Relic Logs.
  # newrelic-logging.enabled -- Install the [`newrelic-logging` chart](https://github.com/newrelic/helm-charts/tree/master/charts/newrelic-logging)
  enabled: "{{ k8s_newrelic_logging_enabled }}"
k8s_newrelic_values_newrelic_pixie:
  # Deploy the New Relic Pixie Integration.
  # newrelic-pixie.enabled -- Install the [`newrelic-pixie`](https://github.com/newrelic/helm-charts/tree/master/charts/newrelic-pixie)
  enabled: "{{ k8s_newrelic_pixie_enabled }}"
k8s_newrelic_values_pixie_chart:
  # Pixie is an open source observability tool for Kubernetes applications.
  # pixie-chart.enabled -- Install the [`pixie-chart` chart](https://docs.pixielabs.ai/installing-pixie/install-schemes/helm/#3.-deploy)
  enabled: "{{ k8s_newrelic_pixie_chart_enabled }}"
k8s_newrelic_values_newrelic_infra_operator:
  # Pluggable webhooks and controllers to support the k8s monitoring solution.
  # newrelic-infra-operator.enabled -- Install the [`newrelic-infra-operator` chart](https://github.com/newrelic/newrelic-infra-operator/tree/main/charts/newrelic-infra-operator) (Beta)
  enabled: "{{ k8s_newrelic_infra_operator_enabled }}"
k8s_newrelic_values_newrelic_prometheus_agent:
  # Deploys Prometheus Server in Agent mode configured by the newrelic-prometheus-configurator.
  # newrelic-prometheus-agent.enabled -- Install the [`newrelic-prometheus-agent` chart](https://github.com/newrelic/newrelic-prometheus-configurator/tree/main/charts/newrelic-prometheus-agent)
  enabled: "{{ k8s_newrelic_prometheus_agent_enabled }}"
k8s_newrelic_values_newrelic_k8s_metrics_adapter:
  # newrelic-k8s-metrics-adapter.enabled -- Install the [`newrelic-k8s-metrics-adapter.` chart](https://github.com/newrelic/newrelic-k8s-metrics-adapter/tree/main/charts/newrelic-k8s-metrics-adapter) (Beta)
  enabled: "{{ k8s_newrelic_k8s_metrics_adapter_enabled }}"
k8s_newrelic_values_global:
  licenseKey: "{{ k8s_newrelic_license_key }}"
  cluster: "{{ k8s_newrelic_cluster_name|default('') }}"
  lowDataMode: "{{ k8s_newrelic_low_data_mode }}"
